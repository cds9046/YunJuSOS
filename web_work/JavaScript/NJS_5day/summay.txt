* 조건제어문
 1. if(else)
 2. switch(case, default)

* 반복제어문
 2. while(조건식)
   - 조건식이 true면 반복을 진행, false면 반복 종료.
   - 횟수로 반복하는 것이 아닌, 특정 조건에 만족하는 경우 명령문장을 반복.
   - 기본문법)
     while(조건식) {
         반복문장들; ...
     }
   - do, while 문법)
     do { 
         반복문장들; ...
     } while(조건식);
     -> 반복문장들을 실행하고 조건을 따지는 방식 (최소 1번은 반복문장들이 실행된다)

* 기타제어문
 1. break : 제어문을 중단시키는 역할을 하는 제어문 (for, while, switch)
            반복문을 중단시킬 때는 if문과 함께 사용
 2. continue : 제어문을 지속시키지만 continue 다음의 문장은 실행x (for, while)

* 제어문
 1. 조건 : if, switch
 2. 반복 : for, while
 3. 기타 : break, continue

* 함수와 객체
 1. 함수
  - 특수한 한가지 목적을 가진 명령어를 묶어놓은 것
  - 묶었을 때,
    i) 장점 : 묶인 명령어를 반복적으로 사용 가능(재사용!)
    ii) 단점 : 묶기가 어렵다 (설계가 필요)
  - 함수의 유형 4가지
    1) 입력값(인자, 파라미터)과 출력값(return, 반환)이 있는 유형
      : 내가 로봇에게 재료를 주면(파라미터), 로봇이 재료로 만들어서 나에게 주는 결과(반환값)가 있는 형태
    2) 입력값만 있는 유형
      : 내가 재료를 주면, 로봇이 만들어서 진열도 하는 형태
    3) 출력값만 있는 유형
      : 내가 명령만 하면 로봇이 재료를 구해서 만들어서 나에게 줌
    4) 입력값과 출력값이 모두 없는 유형
      : 내가 명령만 하면 로봇이 재료를 구해서 만들고 진열도 하는 형태
  - 함수 선언 문법)
    function 함수명(매개변수){}
  - 함수 호출
   1) 반환이 있는 경우 (인자가 있을 경우)
     : 변수 = 함수명(인자값1, 인자값2, ...);
   2) 인자만 있는 경우
     : 함수명(인자값1, 인자값2, ...)
   3) 반환만 있는 경우
     : 변수 = 함수명()
   4) 인자 반환 모두 없을 경우
     : 함수명();
  - 함수 호이스팅(hoisting)
   : 선언 위치와 상관없이 어디서든 사용가능한 것.
  - 함수 표현식
   : 변수에 익명함수를 저장하는 방식 (호이스팅 불가)
   : const fname = function(){ statements; };
  - return : 함수를 종료시키는 역할을 담당하는 문장



