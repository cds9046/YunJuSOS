* JavaScript
 - HTML(문서의 골격), CSS(문서의 모양), JS(문서의 동적제어)
 - 프로그램 = 명령어의 집합

* 컴퓨터의 단위
 - 비트(bit) : 2진수 1자리의 값을 저장할 수 있는 공간 (컴퓨터의 최소 단위)
 - 바이트(byte) : 8개의 bit로 구성 (Data의 최소 단위)

* Data(자료)
 - 프로그램이 처리할 수 있는 모든 것
 - Data type(자료형) : Data를 크기로 분류한 것
  1) 숫자형(Number)
  2) 문자형(String) 
  3) 진리형(Boolean)
  4) 정의되지 않음(Undefined)
  5) 없음(Null)
 - 변수를 만들 때 사용

* 변수?
 - 데이터를 저장하는 공간에 이름을 붙인 것
 - 이름을 붙이는 이유?
  : 저장한 데이터를 불러오는데 편하게 사용하기 위해서 (사람을 위한)
 - 변수 사용 용도
  1) 사용자의 입력값 저장
  2) 계산 결과를 저장
  3) 제어해야 하는 요소의 저장
  4) 제어 조건의 저장

* 변수명(식별자) 작성 규칙(함수명도 같은 규칙 적용)
 - a~z, A~Z, 0~9, '_', '$'만 사용가능
 - 숫자로 시작 불가
 - 사이에 공백 불가 (공백 대신 카멜케이스 사용 권장)
 - 키워드 불가 (교재 70p)
 - 대소문자 구분

* 변수 사용법
 1. 변수 선언
 2. 변수 초기회 또는 데이터(값) 대입
 3. 변수 활용 (저장한 데이터 활용)

* 변수 선언
 - 변수 선언 키위드 : var let
   문법) 키워드 변수명
 - var과 let의 차이
  1) var : 중복 선언 o (좋지 않음)
  2) let : 중복 선언 x (주로 사용)

* JavaScript의 위치
 1. 인라인 : html 요소의 이벤트 속성 (예, onClick 등)에 직접 작성
 2. 문서 내부 : <script> 태그에 작성
 3. 문서 외부 : xxx.js 파일을 작성하여 문서에 포함 

* function
 - 한 가지 특별한 목적의 작업을 수행하도록 묶여있는 문장의 집합

* 변수의 사용영역(scope)에 따른 분류
 1. 전역변수(Global Variable) : 함수 밖에서 선언한 변수
 2. 지역변수(Local Variable) : 함수 안에서 선언한 변수

* 상수(const)
 - 값을 저장하는 공간이나, 최초에 한 번 값이 저장되면
   그 값을 변경할 수 없는 공간. (초기화가 반드시 필요)

* 변수로 저장된 데이터의 타입을 알고싶다?
 : typeof(표현식);

 - 자바스크립트의 변수는 고정된 타입 x
   (사용 중 변경o, 때에 따라 타입을 확인하여 처리할 필요가 있음)

 -------------------------------------------------------------
 
* 변수(var, let), 상수(const)
* 데이터 타입(number, string, boolean, undefined, null )
* 연산자(=, +, -, *, /, %, +=, =+, *=, /=, 비교, ++, --, ...)
* 제어문( 조건- if, switch / 반복 - for, while(do) / 기타 - break, continue)
* 배열
* 함수
* 객체(HTML의 요소 처리)

* 조건제어문
 1. if(조건식) : (만일 ~ 라면)
   - 조건식이 참(true)라면 해당 문장을 실행, 거짓(false)이라면 실행 x
   - else 키워드 : 조건식이 거짓일 때의 실행 문장을 작성하는 영역을 만드는 키워드
   - 형식
    1) if(조건식) { 실행문장 }
    2) if(조건식) { 실행문장 } else { 다른 실행문장 }
    3) if(조건식1) { 실행문장1 } 
        else if(조건식2) { 실행문장2 }
        [
        else if(조건식3) { 실행문장3 }
        ......
        else { 다른 실행문장 }
        ] 

    > 형식 1의 예) 홀수만 출력
      if((n % 2) == 1){
         console.log(n);
      }
 2. switch(자료) : 자료가 어떤 case에 해당하면 그 case로 이동해라
  - 자료 : number 타입의 값 또는 변수(상수 포함),
           string 타입의 값 또는 변수(상수 포함)
  - 보조키워드 : case, default
  - 관련제어문 : break

  참고) break 문
      - 제어문을 중단시키는 역할을 하는 제어문
      - 영향을 받는 제어문 : for, while, switch
      - switch & break
       : case를 분리하는데 사용. 순차적으로 처리.
       : 분리시키지 않아야 하는 경우, break 사용x
      - for와 while문에서 break 사용 시 if와 같이 사용x

* 반복제어문
 1. for
   - 특정 횟수만큼 문장(들)을 반복적으로 실행할 때 사용하는 제어문
   - 기본형: for (카운터변수초기식; 반복횟수조건식; 카운터변수증감식)
            { 반복할 문장들; }
   - 이중 중첩 for문
     for(초기식;조건식;증감식){
      for(초기식2;조건식2;증감식2){
      }
     }
   - 제어문의 중첩
    : 제어문 안에 또 다른 제어문이 들어가는 형식
    : ex) 
      for(){
        for(){
          if(){
            switch(){            
            }
          }
        }
      }
   - 순타구조의 데이터를 처리할 때 유용함 (for in / for of)
   - 관연 라이브러리 함수 : forEach()

  참고) 배열
   - 변수의 묶음. 대표적인 순차구조의 데이터 저장방식
   - 배열의 선언 : 키워드 - var, let, const
     -> 키워드 배열명 = [원소1, 원소2, 원소3, ... ,원소n];
     -> 키워드 배열명 = new Array (원소1, 원소2, 원소3, ... 원소n);
   - 빈 배열 선언 (자바에선 사용 x)
     -> 키워드 배열명 = []; 
     -> 키워드 배열명 = new Array();

   - 배열 원소의 접근(공간 활용, 저장값 활용)
     -> 특정 위치에 값 대입
          배열명[순번] = 값 ;
     -> 저장값 활용 (console.log라면...)
          console.log( 배열명[순번] ) ; 
 2. while

  참고) 함수의 return
      : 함수를 종료시키는 역할을 하는 키워드

  참고) 비교 연산은 주로 뺄셈으로 처리.
        컴퓨터는 모든 데이터를 수치화하여 처리.
        뺄셈으로 처리되는 비교 연산은 시간이 오래 걸림(보수화하여 계산처리)
        다중 분기의 경우, if보다 switch가 효율적.
        si 분야 (웹 프로그래밍 분야)에서는 고려할 사항은 아님(마음대로 하셈)
  
  참고) 이미 만들어진 코드(라이브러리)를 사용하여 프로그램을 제작
   

* 연산자
1. 산술연산자 : +, -, *, /, %
    (대입 =, 복합대입 : +=, -=, *=, /=, %=)
2. 증감연산자 : ++, --
  - 전위: 증가(또는 감소) 후 변수의 값 사용
  - 후위: 변수의 값 사용 후 증가(또는 감소)
3. 비교연산자 : ==, !=, >, >=, <, <=, ===, !==
  - 조건식을 만드는데 사용하는 연산자
  - 연산의 결과는 true/false 가 된다
  - === : 좌우가 같으면 참 (true)
    !== : 좌우가 다르면 참 (true)
4. 논리연산자 : &&, ||, (!)
  - 조건식을 결합하거나 반전시키는 연산자
  - 종류
   1) && : 논리곱(AND). 두 조건식이 모두 true면 전체 조건식이 true (나머지는 모두 false)
   2) || : 논리합(OR). 두 조건식이 false면 전체 조건식이 false (나머지는 모두 true)

5. 조건연산자 : (조건식) ? A : B
  - if문의 연산자 스타일
  - 조건식이 true 일 경우 A, false일 경우 B 실행

  (조건식1) ? A : ((조건식2) ? B : C)

  > 상황에 따라 처리를 다르게 하는 연산자 : +
   1) 숫자 + 숫자 -> 산술(더하기)
   2. 문자열 + (문자열, 숫자, boolean) -> 문자열로 결합
