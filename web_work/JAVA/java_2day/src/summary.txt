* 자바 (Java) - Object Oriented Programming(OOP)

* 데이터 크기
byte < short < int < long < float < double < String

* Type casting(형변환)
 - 변수는 변경 x
 - 단 변수에 저장된 값을 꺼내와서 새로운 자료형으로 변환
 - 숫자형과 문자열형에서만 처리
 - 규칙
   1) [작은 자료형]의 데이터를 [큰 자료형]의 데이터로 변환할 때는 [자동]으로 처리
       (자동 형변환, 암시적 형변환, 묵시적 형변환)
   2) [큰 자료형]데이터를 [작은 자료형] 데이터로 변환할 때는 반드시 [형변환 연산자] 사용!
       (강제 형변환, 명시적 형변환)
       (ex.형변환 연산자 -> (int)값;)

* Wrapper Class
 - 자바는 모든 것을 객체(class)로 처리하는 것이 기본
 - 문제가 되는 것은 '기본 자료형'
 - 따라서 기본 자료형에 해당하는 class 를 만들어 버림! (자료형 포함 class)
 - 기본자료형에 대한 정의와 보조적으로 사용할 수 있는 기능 메소드를 묶어놓은 class
 - 기본자료형에 대한 것이기에 8개만 존재
   1) byte - Byte
   2) short - Short
   3) int - Integer
   4) long - Long
   5) float - Float
   6) double - Double
   7) char - Character
   8) boolean - Boolean

* 연산자 (JavaScript 와 차이점)
   1) 대입연산자 ( = )
     - 좌변의 값(변수, 수식의 결과값 등)을 우변의 변수에 입력
   2) 산술연산자 ( - + * / % )
     - 나눗셈과 나머지 연산은 자료형에 따라 다르게 연산!
     - 특히 % 연산은 실수 연산에선 사용하지 않는다(굳이...)
   3) 증감연산자 ( ++ -- )
     - JS와 동일
   4) 비교연산자 ( == != > >= < <=)
     - JS와 동일. === !== 는 없음. (why? 자바는 타입을 정해서 쓰기 때문!)
   5) 논리연산자 ( && || ! )
     - JS와 동일
   6) 조건연산자 (조건식)? A: B;
     - JS와 동일
   7) bit 연산자(는 쓰지 않으므로 생략) (why? 자바는 기본이 byte)
   8) instanceof(는 나중에.....)

* 제어문 (JavaScript 와 차이점)
  1) 조건제어문 : if , switch
  2) 반복제어문 : for , while
     - for 문에 다소 차이가 있음 (for in / for of / for Each 없음)
     - 기본.ver : for(초기식; 조건식; 증감식;)
     - 향상.ver : for(변수 : 리스트) <- JS [for in] 과 유사
  3) 기타제어문 : break , continue


  실습) 콘솔 프로그램의 골격
      - 프로그램 실행 후 처음으로 타이틀 출력 > 메뉴출력 > 메뉴입력 > 해당기능수행
        > 메뉴출력 > ...... > 종료메뉴입력 > 종료

* Scanner (입력 처리 객체)
 - 다양한 자료형의 데이터를 키보드로부터 입력받기 위해 사용하는 객체
 - 종류
   1) 정수 입력 : nextByte(), nextShort(), nextInt() , nextLong()
   2) 실수 입력 : nextFloat(), nextDouble()
   3) 불(boolean) 입력 : nextBoolean()
   4) 문자열 입력 : nextLine()
 - 오류
  : 정수, 실수, 불 입력 후 문자열 입력용 nextLine()을 사용하면 문자열을 입력받지 못함
  : 입력의 끝을 인식하는 방식은 개행문자로 처리
    (개행문자를 입력받으면 입력작업 종료)
  : 개행문자(Enter키) - 줄을 바꾸는 특수문자
 - 오류 처리 방법
   1) nextLine()을 한 줄 작성 (변수에 대입 x)
   2) next() 사용 (여러 단어의 문장은 입력 x)  <- 제일 별로
   3) 모든 입력을 nextLine()으로 한다  <- 제일 좋음
      (숫자를 입력받을 경우, Wrapper Class 의 parseXXX 메소드로 변환하여 사용)

* 배열
 - 여러 변수의 묶음
 - 같은 자료형의 데이터만 저장 가능 (크기가 반드시 지정되어야 함)
 - 배열의 선언
  : 자료형 배열명[] = new 자료형[개수];
  : 자료형 배열명[] = {값1, 값2, 값3, 값4, ...}
 - 관련 메소드
  : length - 배열의 크기를 저장하는 내장 변수

* 다차원 배열 - 2차원 배열
 - 2차원 배열 선언
  : 자료형 배열명[][] = new 자료형[줄개수][칸개수];

  참고) 리스트(List) 구조객체 : ArrayList 를 주로 사용