* 상속
 - 기존 클래스를 재사용하여 새로운 클래스를 생성하는 것
 - extends 키워드를 사용
   class 새클래스명 extends 기존클래스명 { }


* this 와 super
 - this : 단일 클래스
 - this.변수명 : 멤버변수와 지역변수의 구분
   this() : 한 생성자에서 다른 생성자를 호출할 때 사용
 - super : 상속 관계 클래스들
 - super.변수명 : 부모클래스의 멤버변수
   super() : 부모클래스의 생성자


* 접근제어자 protected
 - 상속받은 하위(자식)클래스에서만 접근 가능
 - 같은 패키지인 경우 default 와 같으나,
   다른 패키지여도 상속하여 작성한 클래스라면 사용 가능

 참고) 제어자
     1) 접근제어자 : public, protected, (default), private
       - 변수는 private / 메소드는 public 으로 쓰면 좋다
     2) 비접근제어자 : static, final, abstract(추상화)


* 다형성 (Polymorphism)
 - 하나의 참조변수로 여러 타입의 인스턴스를 저장하는 것
 - 같은 이름 다른 형태
 - 메소드 오버로드 (같은 메소드를 여러개 작성)
 - 부모클래스를 저장하는 변수에 자식 클래스를 저장할 수 있다
 - 자식클래스로 만든 인스턴스를 부모클래스의 참조변수에 담을 수 있다

 - 형변환 : 객체의 경우 상속 관계에서만 형변환이 가능
   1) up cast : 자식 인스턴스를 부모 참조변수에 저장
   2) down cast : 부모 참조변수에 저장된 인스턴스(저장)를 자식 참조변수로 되돌리는 것

 - 부모클래스로 만든 인스턴스는 자식 클래스로 만든 참조변수에 저장할 수 없다
 - 부모의 참조변수에 저장한 인스턴스는 새로 추가한 멤버를 사용할 수 없다
   사용을 위해서는 다시 원래의 인스턴스로 복원해야 한다(down cast)
   이 때, 확인을 위해 [instanceof 연산자(명령어)] 를 사용!

   참고) instanceof 연산자(명령어)
      - 인스턴스가 어떤 클래스로 만든건지 확인하는 명령어 (true/false)