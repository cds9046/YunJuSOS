* static(정적인)
 - 인스턴스 없이 사용가능한 필드(변수)/메소드
 - 멤버에만 해당 (지역변수에는 붙이지 않는다)
 - static 멤버변수는 사용 시 클래스의 이름으로 사용.
   같은 클래스로 만들어진 모든 인스턴스가 공유하는 공간
 - 인스턴스 멤버와 스태틱 멤버의 사용에 대한 제약 사항
   1) 인스턴스 멤버는 스태틱 메소드에서 사용 불가
      (인스턴스 변수는 인스턴스 메소드에서만 사용 가능)
   2) 스태틱 멤버는 모든 경우에 사용 가능
 - static 멤버는 보호하기 어려운 멤버...


* 제어자
  1) 접근제어자 - public, protected, default, private
  2) 기타제어자 - static, final
    > final ?
     : 마지막! (이후 변경 불가)
     : 변수 앞에 final 이 붙으면 - 상수
     : final 이 클래스 앞에 붙으면 - 상속 불가능한 클래스
     : final 이 메소드 앞에 붙으면 - 재정의가 안되는 메소드


* 메소드의 다형성
 - 하나의 클래스에 같은 이름의 메소드를 다수 정의하는 것
   (Method Overloading 메소드 오버로딩)
 - 오버로딩의 조건
   1) 메소드의 이름이 같아야 함
   2) 매개변수의 개수 또는 자료형이 달라야 함
   3) 반환형은 상관 x
 - 대표 예) System.out.println();


* 생성자(Constructor)
 - 인스턴스가 생성될 때 호출(사용)되는 메소드
 - 인스턴스를 만들 때 항상 사용했었다...
   ex) 인스턴스 생성문법
       클래스명 인스턴스명 = new 생성자();
 - 생성자 특수성
   1) 클래스의 이름과 같은 이름을 갖는다 (대소문자까지)
   2) 반환형을 작성하지 않는다 (void 도 사용x)
   3) 모든 클래스는 최소 하나의 생성자가 있어야 한다
 - 기본 생성자
   : 생성자 중 매개변수가 없는 생성자
   : 생성자가 없는 클래스에는 자동으로 기본생성자를 컴파일러가 작성하여 처리
 - 생성자는 인스턴스를 생성할 때만 사용할 수 있는 특수한 메소드
   -> 필드(멤버변수)의 값을 초기화 할 때 사용
 - 생성자는 인스턴스의 생성과 관련된 메소드이기 때문에 어디서든 접근가능해야 함
   따라서 항상 public 으로 작성 (예외도 있긴 함)

   참고) 멤버 변수(필드)의 초기값(초기화 없이 자동으로 들어가는 값)
       - 지역변수는 자동으로 초기값이 들어가지 않는다
         but 멤버변수는 자동으로 초기값을 넣어준다
       - 0에 해당하는 값으로 초기화
         > 정수형(byte, short, int, long) - 0
         > 실수형(float, double) - 0.0
         > 문자형(char) - '\0' <- 널 문자(null character, 비어있는 문자)
         > 논리형(boolean) - false
         > 문자형(String) - null


* this 란?
 - 여기, 이곳.
 - 인스턴스를 구별하기 위한 방법. 일종의 참조변수
 - 멤버를 지칭하는 대명사
 - this.변수명 -> 같은 이름의 멤버변수와 지역변수를 구분하는 용도

 - 또 다른 this?
  : 생성자를 나타내는 this() 메소드
  : 유일하게 생성자를 호출하는 용도로 사용하는 this
