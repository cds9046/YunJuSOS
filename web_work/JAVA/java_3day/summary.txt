* 메소드(함수)
  - 한 가지 목적을 처리하기 위한 명령어 묶음
  - 결과값(반환값)이 하나이거나 없음
  - 함수가 객체 내부에서 작성되었을 때 메소드(Method)라고 함
  - 4가지 유형이 존재
    1) 파라미터, 반환값 모두 존재
    2) 파라미터만 존재
    3) 반환값만 존재
    4) 파라미터, 반환값 모두 없음
  - 문법
    : 반환값의자료형 메소드이름(파라미터목록) { 명령어들 }


* 변수 용어의 종류
  1) 멤버 변수 : 클래스 내부, 메소드 외부에 작성하는 변수
  2) 인스턴스 (멤버)변수 : 멤버변수이며 static 이 붙지 않는 변수
  3) 스태틱 (멤버)변수 : 멤버변수이며 static 이 붙는 변수 (=클래스 변수)
  4) 지역 변수 : 메소드 내부에 작성하는 변수
  5) 매개 변수 : 파라미터를 받기 위해 메소드명 다음 '('와 ')' 사이에 작성하는 변수 (=지역변수)
  6) 필드 : 멤버변수 중 인스턴스변수를 지칭하는 다른 말
  7) 인스턴스 참조변수 : 멤버변수 또는 지역변수이며, 인스턴스의 위치값을 저장하는 변수
                        ( class 명 변수 = new class 명(); )

  참고) 자바 프로그램 구현 단계
       클래스 작성 -> 인스턴스 생성(new 키워드) -> 인스턴스.멤버 사용

  참고) 디자인 패턴(설계 유형)
       - MVC 패턴 : Model, View, Controller 로 전체 코드를 분할하여 구현

  참고) DOS 명령어
       1) 폴더 내용(목록) 보기 : dir
       2) 폴더 변경 : cd 폴더명


* 예외 처리(Exception Handling)
  - 개발자가 실행오류를 예측하여 해당 오류 발생 시 조치할 수 있는 코드를 미리 작성하는 것
    (비정상적 종료를 막는 것)
  - Error(오류)
    > 컴파일 오류(Compile Error) : 문법오류(80% 이상 오타)
    > 실행 오류(Runtime Error) : 사용자의 오작동 -> 예외 (이 때 프로그램은 비정상적으로 종료됨)
  - try : 범위 안에 예외사항이 발생할 수 있는 코드를 작성
    catch : try 코드에서 발생한 예외를 처리하기 위한 코드 작성
    finally : 생략 가능. 예외와 상관없이 실행해야 하는 코드를 작성
  - 주요 예외사항
    1) 숫자가 아닌 문자열을 숫자로 변환하려고 하는 경우
      : NumberFormatException
    2) 정수를 0으로 나누는 경우
      : ArithmeticException
    3) 객체(인스턴스)가 존재하지 않는데 사용하려고 하는 경우
      : NullPointException
    4) 존재하지 않는 파일을 열려고 하는 경우
      : IOException
    5) 배열에서 배열크기보다 큰 순번으로 값을 쓰려는/읽으려는 경우
    6) 네트워크 관련 처리
    7) 데이터베이스 관련 처리
  - 기본적으로 catch()에는 해당 예외사항의 객체를 지정해야 함
    모든 예외에 대해서 지정할 수 있는 Exception 하나로 처리할 수 있음
  - 2가지 이상의 예외사항이 발생하는 경우에 대한 처리
    : catch()를 여러번 쓰기.
  - 메소드에 예외 선언하기
    Throws : 메소드에서 발생한 예외사항을 호출한 메소드로 전달
    반환형 메소드명(매개변수) throws 예외사항1, 예외사항2, ...{ }
    - 매개변수 목록 옆에 작성


* 객체 지향 개념 (Object Oriented)
  - 다양한 작업이 가능한 프로그램 코드들(명령들)을 하나로 묶어서 작성 후
    다른 묶음과 연계하여 처리하는 프로그래밍 방식
  - 객체 = 변수 + 메소드
  - 객체지향의 특성
    1) 캡슐화(Encapsulation)
      - 변수와 메소드 하나로 묶는다
      - 클래스를 만드는 작업
      - 클래스 분류
        1_ 정보클래스 (변수와 변수의 입출력을 담당하는 메소드)
          : DTO(Data Transfer Object), VO (Value Object)
           > 1. 필드(멤버변수)
             2. Setter 메소드 : 필드에 데이터를 대입하는 메소드
             3. Getter 메소드 : 필드의 데이터를 읽어오는 메소드
        2_ 부품클래스 (기능제공 특화된 클래스)
        3_ 제어클래스 (정보클래스와 부품클래스로 프로그램을 완성하는 클래스)
      - 정보은닉(Information Hiding) : 클래스의 구성을 숨긴다
    2) 상속(Inheritance) : 기존 코드를 재사용 + 확장
    3) 다형성(Polymorphism) : 같은 이름의 메소드를 만들거나, 대표클래스로 하위 클래스를 포함시킴


---------------------------------------------------------------------------------------------


* ArrayList
  - 배열과 유사한 형태의 저장 구조 객체
  - java.util 패키지에 포함
  - import java.util.ArrayList; 문장을 맨 위에 작성
  - 저장은 객체(인스턴스)를 기반으로 한다.
  - '<' 와 '>' 사이에 저장하고 싶은 데이터를 담을 수 있는 클래스를 넣는다
  - 개발자가 작성한 DTO 클래스도 저장할 수 있다.

    <클래스> <- 요 형태를 '제네릭스(Generics)' 라고 함
    - 저장하고자 하는 클래스를 지정하면 그 클래스의 크기에 맞게 최종설정하여 생성하는 형태 (템플릿)

  - ArrayList 데이터 추가하기 : add(인스턴스)
    ArrayList 데이터 가져오기 : get(idx)
    ArrayList 데이터 삭제하기 : remove(인스턴스/idx)
    ArrayList 전체 데이터 삭제하기 : clear()

    idx : 순번. 0번부터 시작


  참고) 모든 클래스의 조상 클래스 - Object
      : Object 타입으로 만든 변수에는 모든 것을 저장할 수 있다.

