* 생성자
 - 인스턴스의 필드를 초기화하기 위해 사용하는 특수 메소드
 - 클래스와 같은 이름을 사용하며, 반환형을 붙이지 않는다
 - 인스턴스 생성을 위해 public 을 붙여준다
 - 생성자 오버로딩
  : 다양한 매개변수를 갖는 여러개의 생성자를 작성할 수 있다


* this 란?
 - 여기, 이곳.
 - 인스턴스를 구별하기 위한 방법. 일종의 참조변수
 - 멤버를 지칭하는 대명사
 - this.변수명 -> 같은 이름의 멤버변수와 지역변수를 구분하는 용도
 - 생성자를 나타낼 때 this() 메소드
  : 유일하게 생성자를 호출하는 용도로 사용하는 this()
  : 생성자 안에서 다른 생성자를 호출하는데 사용한다


* 상속(Inheritance)
 - 기존의 클래스를 재사용하여 새로운 클래스를 작성하는 것
 - 두 클래스는 조상(부모), 자손(자식) 관계를 형성 (계층화)
 - 자손 클래스는 조상 클래스의 모든 멤버를 상속받는다
   (생성자와 private 멤버 제외)
 - 자손의 멤버 개수는 조상보다 적을 수 없다 (같거나 많다)
 - 기본적으로 모든 클래스는 Object 클래스를 상속받아서 만들어 짐
   (당연하기에 생략~)
 - 상속 문법: extends
   (자바 상속용 키워드. 새로만들 클래스명 뒤에 이 키워드와 부모클래스의 이름을 작성)
 - class Parent {}
   class Child1 extends Parent {} // extends Object 생략
   class Child2 extends Parent {}
   class GrandChild extends Child1 {}
 - 상속을 활용하는 방법
  : 따로 각 클래스를 작성하고 공통적인 멤버가 존재할 경우
    그 부분만 뽑아서 부모클래스로 작성하는 방법이 일반적임


* 메소드 재정의 (Method Overriding)
 - 부모 클래스의 메소드를 자식 클래스에서 재정의. 덮어쓰기
 - 기본조건
   : 메소드의 선언부가 동일해야 함
   : 상속받은 메소드의 내용을 새 클래스에 맞게 변경하는 것

   void method1()    -> 선언부
   -----------------------------------
   {
        ......       -> 정의부(body, 몸통)
   }

   참고) Annotation
       - 컴파일되는 주석. 컴파일러에게 주는 명령어
       - @Override : 이 메소드는 재정의 된 메소드임을 알려주는 목적의 주석

    Object 클래스의 메소드를 재정의 하자
    toString() 메소드: 인스턴스를 출력할 경우
                      패키지.클래스명@16진수고유넘버 형태로 출력


* super : 부모클래스를 지칭하는 대명사와 같은 의미
        : 부모클래스의 멤버와 자식클래스의 멤버를 구분하는데 사용
          (= 이름이 같은 멤버의 구분에 사용)
          (super.멤버) <-> this
  super() : 부모클래스의 생성자를 호출할 때 사용 (부모클래스에 생성자가 없으면 사용x)
          : 자식클래스의 생성자에서만 사용 가능
          : 자식클래스 생성자의 [맨 첫줄]에 위치해야 함


* final 제어자
 - 클래스에 final 이 붙으면 상속 불가
 - 메소드에 final 이 붙으면 오버라이드(재정의)불가


   실습) 연락처 프로그램을 생성자를 사용하는 형태로 변경하시오
        dto 클래스에 생성자를 추가하시오
        inputData 메소드를 생성자를 사용하는 형태로 변경하시오

   실습) 연락처 프로그램 v2
        상속을 활용한 연락처 프로그램
        일련번호(시리얼넘버), 이름, 연락처, 나이, 생일 / 전공, 학교, 학년 / 회사명, 부서명, 직급
        ->
        1. 일반(부모클래스)
        : 일련번호, 이름, 연락처, 나이, 생일
        2. 학교
        : 학교, 전공, 학년
        3. 회사
        : 회사명, 부서명, 직급

