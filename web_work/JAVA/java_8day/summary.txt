* 다형성(Polymorphism)
 - 부모클래스로 만든 변수에 자식클래스의 인스턴스를 저장하는 것
 - 자식클래스에 정의된 모든 기능을 사용하려면 다시 자식클래스로 만든 변수에 인스턴스를 옮겨야 한다 (Down Casting)
 - instanceof : 어떤 클래스로 만든 인스턴스인지를 구별하기 위한 명령어


* 추상화(Abstraction)
 - 알고는 있으나 정확하게 표현하기 힘든 것을 설명하는 것 (추상적 표현)
 - 개념클래스 작성 : 추상화 -> 추상 클래스(Abstract)
 - 추상클래스는 미완성 클래스.
   (완성 클래스? 모든 멤버 메소드의 정의가 완전하게 끝난 상태의 클래스)
 - 추상메소드 : 정의부가 작성되지 않은 메소드

   반환형 메소드명()  --> 선언부
   --------------------------
   {
      .....         --> 정의부
   }

 - 따라서 추상클래스는 반드시 상속하여 자식클래스로 만들어서 사용
   이 때, 미완성된 메소드의 정의부를 작성해야 함
 - 추상 클래스는 팀장이 팀원에게 일을 주는 경우에 많이 사용됨
   오버라이딩을 강제하기 때문에 정해진 메소드 이름으로 새로운 클래스를 작성하도록 하여
   전체 프로젝트를 [병렬화] 할 수 있음


* 인터페이스 (Interface)
 - 추상화 정도가 더 심한 클래스 (모든 메소드가 정의되지 않음)
 - 추상메소드 + 상수(= final 변수.바꿀 수 없음) (※ 변수는 들어갈 수 없음)
 - 인스턴스 생성 불가
 - 목적: 새로운 클래스 작성에 도움을 주는 것 (클래스 작성의 표준을 제시)
 - 코드 자동화(프레임 워크)에 활용
 - 인터페이스의 작성법
   1) class 라는 키워드 대신 interface 사용
   2) 모든 메소드는 추상 메소드이며 재정의가 되어야 하기 때문에
      public abstract 가 앞에 붙는다
   3) 모든 변수의 앞에는 public static final 이 붙는다
   4) 반드시 붙어야 하는 키워드는 생략할 수 있다

* 제어자 간 조합
  1. 메소드에 static 과 abstract 를 함께 사용할 수 없다
     static - 인스턴스 없이 사용 가능
     abstract - 인스턴스를 생성할 수 없음
  2. 클래스에 abstract 와 final 을 함께 사용할 수 없다
     abstract - 상속 강제
     final - 상속 불가
  3. abstract 메소드의 접근제어자가 private 일 수 있다
     abstract - 오버라이딩 필수
     private - 상속해도 사용 불가(재정의 권한도 막음)
  4. 메소드에 private 와 final 을 같이 사용할 필요가 없다
     private 하나로 모두 처리될 수 있기 때문 (써도 되긴 함. 근데 뭐 굳이;...?)

  참고) 일반적인 작성순서 : 접근제어자 비접근제어자 순 (반대로 해도 무방)

  제어자의 대상
  1) 클래스 - 접근제어자, abstract, final
  2) 메소드 - 접근제어자, final, abstract, static
  3) 멤버변수 - 접근제어자, final, static
  4) 지역변수 - final

* Inner Class(내부클래스)
 - 클래스 내부에 작성하는 클래스. 클래스가 멤버가 된다
 - 장점> 외부 클래스의 멤버를 자유롭게 사용 가능해 진다

* 익명 클래스
 - 인터페이스로 새로운 클래스를 파생시킬 때
   클래스의 이름이 없이 바로 작성하여 인스턴스를 생성하는 클래스
 - 클래스의 이름이 없기 때문에 익명 클래스라고 함
 - GUI 프로그래밍, 안드로이드 프로그래밍에서 많이 사용하는 방식
   1회용, 전용 기능을 작성할 때 주로 사용

* ArrayList <- 자식클래스 => List 인터페이스

* 기타 유용한 객체들
 - 문자열(String)
   1) equals() : 두 문자열 변수에 저장된 실제 데이터의 비교
   2) concat() : 두 문자열을 결합. '+'와 같음
   3) charAt(n) : 지정된 위치의 문자 가져오기
   4) contains(str) : str 이 있으면 true, 없으면 false
   5) indexOf(str,n) : str 이 있으면 시작위치를, 없으면 -1
                     : n은 검색 시작 위치(생략하면 처음부터)
   6) split(구분자) : 구분자에 따라 문자열을 문자열 배열로 변환
   7) replace(str1, str2) : str1을 str2로 변환
      replaceAll(str1, str2) : 모든 str1을 str2로 변환
                             : str1에 수식을 사용
                             : '[' 와 ']' 사이에 다음의 키워드를 입력
                               > ^ : not. str1을 제외한 나머지를 변경
                                 - : 범위를 지정. (예)0-9 : 모든 숫자)
   8) length() : 문자열의 길이
   9) substring(st, ed) : st 부터 ed 의 직전까지의 문자열 추출

 - StringBuffer

 - 날짜와 시간 (Calender class)

   > Calendar

   > 싱글톤 패턴?

 - 파일(File)

