* StringBuffer
 - 임시 저장고. 문자열 수정 및 변경 등의 작업의 효율성을 높이는 보조 객체
 - StringBuffer 에서 작업한 내용은 마지막에 문자열로 변환이 필요! (toString 메소드 활용)
   1) append(str) : 버퍼에 새 문자열 추가 (뒤에 붙인다)
   2) capacity() : 용량. 버퍼의 크기
   3) length() : 문자열의 길이
   4) delete(st, ed) : 지정된 범위의 문자열 삭제
   5) insert(idx, str) : 지정된 위치(idx)에 str 삽입
   6) replace(st, ed, str) : 지정된 범위의 문자열을 str 로 변경
   7) reverse() : 문자열의 순서를 역순으로 정렬
   8) charAt(idx) : 지정된 위치의 문자를 가져온다
   9) setCharAt(idx, char) : 지정된 위치에 문자를 변경한다


* 날짜와 시간 (Calender class)
 - 활용 클래스
   > java.util 패키지 Data, Calendar class
   > java.time 패키지 SimpleDateFormat class
 - SimpleDateFormat 의 날짜와 시간 표기 기호
   1) G : AD/BC ㅇ등 연호
   2) y : 연도 / M : 월 / d : 일 / E : 요일
   3) a : 오전&오후 / h : 시 / m : 분 / s : 초 / S : 밀리초 / k or H : 24시간 주기 시
   4) w : week of year / W : week of month / D: day of year / F : day of week
 - Calendar : 날짜와 시간의 보편적인 사용을 위한 클래스
              싱글톤(Singleton) 패턴을 사용하여 인스턴스 생성
 - 싱글톤 패턴
   : 프로그램이 실행 중일 때 인스턴스를 하나만 생성하도록 제약하는 방식
     인스턴스를 사용하려는 다른 클래스에서 만들지 못하게 하고 스스로 만들어서 인스턴스를 제공하는 방식
      (세상에 단 한 대 뿐인 차!)


* 파일(File)
 - 프로그램에서 발생된 데이터를 유지하는 방법
   1) 파일을 활용
   2) Database 를 활용하는 방법
 - 폴더 : 파일을 저장하는 공간(?), 파일이나 서브폴더의 정보를 저장하고 있는 파일
 - 파일 : 보조기억장치(하드디스크, HDD, c: 또는 D:)에 저장된 상태의 데이터 묶음
          -> 파일을 활용하려면 메모리에 적재되어야 한다
 - File 클래스 : 파일과 폴더(디렉토리)를 다루는데 사용하는 클래스
                메모리에 적재하여 사용하는 클래스
 - 파일 작업
   1) 파일 정보 확인
   2) 파일 경로 확인
   3) 파일 이름/경로 변경
   4) 파일 생성
   5) 파일 삭제
   6) 폴더 생성
   7) 폴더 정보 확인
   8) 폴더 변경
   9) 폴더 삭제
 - 파일 입출력
     입출력 (input/output) : 기준은 프로그램
      - 키보드 입력, 모니터 출력
      - 파일로부터 입력(불러오기), 파일로 출력(저장하기)

     입출력이란 데이터의 연속된 흐름을 처리 (Stream)
     스트림은 단방향. 입력용 스트림과 출력용 스트림을 따로 사용

     필요 클래스
     1. File 클래스
     2. 파일 입출력용 스트림 클래스
        FileInputStream / FileOutputStream : Byte 단위로 처리
        FileReader / FileWriter : 문자 단위로 처리
     3. 보조 입출력용 스트림 클래스
        BufferedReader / BufferedWriter : 문장/한줄 단위
